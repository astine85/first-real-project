pipeline {
    agent any
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to build from')
        string(name: 'REPO_URL', defaultValue: 'https://github.com/astine85/first-real-project.git', description: 'Repository URL to build from')
        string(name: 'VERSION', defaultValue: "V00${BUILD_ID}", description: 'Version of Docker image to be built, e.g., V001')
        string(name: 'TASK_DEF_JSON', defaultValue: 'continuous-integration-continuous-deployment/task-def.json', description: 'Path to the task definition JSON file')
        string(name: 'CREATE_SERVICE_FILE', defaultValue: 'continuous-integration-continuous-deployment/create-ecs-service.json', description: 'Path to the create service JSON file')
        string(name: 'UPDATE_SERVICE_FILE', defaultValue: 'continuous-integration-continuous-deployment/update-ecs-service.json', description: 'Path to the update service JSON file')
        string(name: 'SERVICE_NAME', defaultValue: 'first-real-project-ecs-service', description: 'ECS Service Name')
        string(name: 'ECS_CLUSTER_NAME', defaultValue: 'first-real-project-ecs-cluster', description: 'ECS Cluster Name')
        string(name: 'ECR_URI', defaultValue: '992382432814.dkr.ecr.us-east-1.amazonaws.com/first-real-project', description: 'ECR URI')
        string(name: 'IMAGE_NAME', defaultValue: 'first-real-project-app', description: 'Image Name')
        string(name: 'TARGET_GROUP_NAME', defaultValue: 'marketvector-tg', description: 'Target Group Name')
        string(name: 'VPC_ID', defaultValue: 'your-vpc-id', description: 'VPC ID') // Replace with your actual VPC ID
    }

    environment {
        GITHUB_CREDENTIAL = 'your-github-credentials-id' // Update with your actual credentials ID
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Clone GitHub Repo') {
            steps {
                git branch: "${params.BRANCH}", credentialsId: "${GITHUB_CREDENTIAL}", url: "${params.REPO_URL}"
            }
        }

        stage('Application Build And Test') {
            steps {
                sh 'chmod +x ./mvnw'
                sh './mvnw clean install'
                sh './mvnw test'
            }
        }


    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    // Build your Docker image here
                    sh 'docker build -t first-real-project-app:V0015 .'
                }
            }
        }

        stage('Push To Elastic Container Registry') {
            steps {
                script {
                    // Log in to ECR and push the Docker image
                    sh '''
                        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 992382432814.dkr.ecr.us-east-1.amazonaws.com/first-real-project
                        docker tag first-real-project-app:V0015 992382432814.dkr.ecr.us-east-1.amazonaws.com/first-real-project:V0015
                        docker push 992382432814.dkr.ecr.us-east-1.amazonaws.com/first-real-project:V0015
                    '''
                }
            }
        }

        stage('Check and Create Target Group') {
            steps {
                script {
                    def targetGroupName = 'marketvector-tg'
                    def vpcId = '<YOUR_VPC_ID>'  // Replace with your VPC ID

                    // Check if the target group exists
                    def targetGroupArn = sh(script: """
                        aws elbv2 describe-target-groups --names ${targetGroupName} --query 'TargetGroups[0].TargetGroupArn' --output text || echo "None"
                    """, returnStdout: true).trim()

                    if (targetGroupArn == "None") {
                        echo "Target group ${targetGroupName} does not exist. Creating target group..."
                        targetGroupArn = sh(script: """
                            aws elbv2 create-target-group --name ${targetGroupName} --protocol HTTP --port 8081 --vpc-id ${vpcId} --query 'TargetGroups[0].TargetGroupArn' --output text
                        """, returnStdout: true).trim()

                        if (targetGroupArn == "") {
                            error "Failed to create target group."
                        }

                        echo "Created Target Group ARN: ${targetGroupArn}"
                    } else {
                        echo "Using existing Target Group ARN: ${targetGroupArn}"
                    }

                    // Update the create service JSON with the target group ARN
                    def createServiceJson = readFile(file: 'path/to/create-ecs-service.json')
                    createServiceJson = createServiceJson.replaceAll(/"targetGroupArn": "[^"]+"/, "\"targetGroupArn\": \"${targetGroupArn}\"")
                    writeFile(file: 'path/to/create-ecs-service.json', text: createServiceJson)
                }
            }
        }

        // Add your other stages here (Register Task Definition, Stop all running tasks, etc.)
    }

    post {
        always {
            echo "Pipeline completed."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
